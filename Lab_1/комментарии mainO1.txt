.file	"main.c"                        # Имя исходного файла
.text                                 # Начало текстового (кода) сегмента
.section	.rodata.str1.1,"aMS",@progbits,1 # Определение секции для строковых литералов только для чтения
.LC0:                                  # Метка для строкового литерала
	.string	"Factorial of %d = %lld\n"  # Строковый литерал "Factorial of %d = %lld\n"
.text                                 # Возвращение в текстовый сегмент (код)
.globl	main                          # Определение глобальной метки для функции main
.type	main, @function               # Указание, что main — это функция
main:                                 # Начало функции main
.LFB23:                               # Начало фрейма отладки функции main
	.cfi_startproc                   # Начало процедуры CFI (Call Frame Information)
	endbr64                          # Защита от неверного перехода (используется в Intel CET)
	subq	$8, %rsp                   # Выделение 8 байт в стеке (выравнивание стека)
	.cfi_def_cfa_offset 16           # Обновление CFI: смещение CFA (Canonical Frame Address) на 16 байт
	movl	$11, %edi                  # Помещение значения 11 в регистр %edi (первый аргумент для функции factorial)
	call	factorial@PLT              # Вызов функции factorial через таблицу PLT (Procedure Linkage Table)
	movq	%rax, %rcx                 # Перемещение результата factorial (в %rax) в %rcx
	movl	$11, %edx                  # Помещение значения 11 в регистр %edx (второй аргумент для printf)
	leaq	.LC0(%rip), %rsi           # Помещение адреса строкового литерала в %rsi (первый аргумент для printf)
	movl	$1, %edi                   # Помещение значения 1 в регистр %edi (флаг для __printf_chk)
	movl	$0, %eax                   # Обнуление %eax (затирание значения для вызова __printf_chk)
	call	__printf_chk@PLT           # Вызов функции __printf_chk через PLT для безопасного вывода
	movl	$0, %eax                   # Возвращаемое значение main равно 0 (успешное завершение)
	addq	$8, %rsp                   # Освобождение 8 байт в стеке
	.cfi_def_cfa_offset 8            # Обновление CFI: смещение CFA на 8 байт (восстановление стека)
	ret                              # Возврат из функции main
	.cfi_endproc                     # Конец процедуры CFI
.LFE23:                               # Конец фрейма отладки функции main
	.size	main, .-main               # Размер функции main
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0" # Идентификационная строка компилятора GCC
	.section	.note.GNU-stack,"",@progbits # Секция для указания, что стек не исполняемый
	.section	.note.gnu.property,"a"  # Начало секции для свойств GNU
	.align 8                         # Выравнивание на границу 8 байт
	.long	1f - 0f                    # Размер первой ноты
	.long	4f - 1f                    # Размер второй ноты
	.long	5                         # Тип ноты
0:                                  # Метка 0
	.string	"GNU"                     # Строка "GNU"
1:                                  # Метка 1
	.align 8                         # Выравнивание на границу 8 байт
	.long	0xc0000002                 # Данные свойства
	.long	3f - 2f                    # Размер следующих данных
2:                                  # Метка 2
	.long	0x3                       # Значение данных свойства
3:                                  # Метка 3
	.align 8                         # Выравнивание на границу 8 байт
4:                                  # Метка 4
